Javascript/jQuery/Git

What cool things can Javascript do for us?  What is it designed to do?
  - Interaction with the Client
  - Page manipulation
  - Logic

Here's an example of what we can do with vanilla Javascript to perform...
  - DOM Manipulation
    - What's the DOM? Document Object Model... You know about objects now!!!
    - Let's console.log() this 'document' object in index.html.
    - Everything in the document is mentioned and we can access different parts of it.

  Let's use the document.getElementById() function.  Know that there are functions we inherited that we can use
    to manipulate and grab elements on our document (page).

  It's a good idea to place scripts at the bottom of your page so the document gets loaded by the browser first before
    running your scripts.  Let's move our script down to the bottom.

  You can capture elements by ID's or classes.  If we do Classes, we get an array of objects back because we can have
    multiple elements with the same class.  Remember your CSS?

  But all of this was too much for most people to memorize or keep up with, so jQuery saves you a lot of time.

  It's a library built in JavaScript to do the same things you would have had to do with vanilla JavaScript but in less time
    and it's much easier to read.

For example:
  document.getElementById("target").style.color = "green";
              vs.
  $('#target').css('color','green');

 There are more features than what can be shared in a short lecture.
  Jump into the platform and start doing the jQuery exercises!!!
  Don't forget to include jQuery into your document.  Follow the example in index.html to include jQuery.

Git & Terminal
  The Platform has great explanation on Terminal and Git Commands.
  Terminal or Command Prompt is a way of navigating your system's file structure without touching a GUI.  Some developers only code inside of
   a terminal or command prompt.  These are extreme cases though.
  - Terminal commands
    ls, mkdir, pwd, cd ...

What's Git?
  Does everyone have their GitHub account ready and Git installed?

  Git is great for version control.  You can track how files change over time and who's committing those changes.
  Imagine working on a team of developers and two people are in charge of one feature while two others are in charge of another.
  Things can get hectic if both teams are using the same code.  What happens when they want to merge their features?
  Git provides a great solution.  You can create/test features on different branches then merge this branch back into what's called
  a master branch.  Think of the master branch as the completely functional branch that the public sees.

  - Git commands
    always preface any command with: git
    git init                  -Initializes a git repo in the current working directory
    git add .                 -Adds all files in your git repo to a staging area
    git commit -m "comment"   -Commits or saves the staged files. -m and the comment are for attaching a message

  Creating repositories allows you to house your code neatly and Git repo's keep an eye on things for you.
  - Let's set up a git repo
    1. Navigate to your Desktop via Terminal/Command Prompt
    2. Create a new folder called evening_course
    3. Navigate into this evening_course folder
    4. Initialize a git repo
    5. Drag the evening_course folder to Sublime or Atom.
    6. Create a new file in evening_course called index.html.  Have it say Hello World in an <h1> tag.
    7. Save your index.html file and then jump back to Terminal and stage your changes
    8. Commit your changes with a comment.

  - Let's set up a remote repo.
    1. Go to GitHub.com and create a New Repository.  Name it appropriately.
    2. Follow the instructions for setting up a remote origin and pushing your local changes to this
       new repo at Github.com.  The commands will be executed in your terminal in the directory where you created the local
       repo with index.html.
    3. Congrats, you've created a repo locally, a repo externally, and pushed the code from your local machine to your external repo

  - Let's clone someone else's work! Another great feature of git and GitHub is code sharing!
    1. create a folder called evening_course_cloning on your Desktop
    2. Navigate to the evening_course_cloning folder
    3. git clone https://github.com/TEnders64/Evening_Course_jQuery_Example.git
    The URL is the latest version of THIS MATERIAL!
    4. Congrats! You've just copied down the code from a repo!

  One thing to always know: Git is local - GitHub is external.
   - You create git repos locally, but then push them to hosted repos at GitHub.com for sharing

What to look forward to: Demo on Pacman Monday!!!
